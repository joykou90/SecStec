'''
1) reading from JSON files generated by UIED;
2) converting UI codes into UI trees;
3) output UI trees in another JSON file;
'''


class DummyNode:
    def __init__(self, attr = None, next=None, pre=None):
        self.attr = attr
        self.next = next
        self.pre = pre
        self.children = []

class LeafNode:
    def __init__(self,attr):
        self.parent = None
        self.attr = attr
        self.id = attr['id']
        self.type = attr['class']
        self.height = attr['height']
        self.width = attr['width']
        self.row_min = attr['row_min']
        self.row_max = attr['row_max']
        self.col_min = attr['column_min']
        self.col_max = attr['column_max']


class RelNode(LeafNode):
    #node used for comparing tree similarity when tree shape are the same
    def __init__(self, attr, bkg_height, bkg_width):
        super().__init__(attr)
        self.x_lt = self.col_min / bkg_width # x of left top bbox
        self.y_lt = self.row_min / bkg_height # y of left top bbox
        self.x_rd = self.col_max / bkg_width # x of right down bbox
        self.y_rd = self.row_max / bkg_height # y of right down bbox

class UITree:
    def __init__(self,hierarchy): #hierarchy == Hierarchy.hierarchy == data['compos']
        self.root = None
        self.origin = hierarchy #self.origin is the JSON file generated from UIED

    def add_dummy_node(self):
        if self.root is None:
            self.root = DummyNode(self.origin[0], None, None)
            return self.root

        itr = self.root
        while itr.next:
            itr = itr.next
        itr.next = DummyNode(None)
        itr.next.pre = itr
        return itr.next

    def add_leaf_node(self, leaf_node, dummy_node):
        leaf_node.parent = dummy_node
        dummy_node.children.append(leaf_node.attr)

    def is_node_existed(self, node):
        # node.id
        itr = self.root
        while itr:
            for leaf_node in itr.children:
                if node.id == leaf_node.get('id'):
                    return True
            itr = itr.next
        return False

    def get_leaf_count(self):
        count = 0
        itr = self.root
        while itr:
            count += len(itr.children)
            itr = itr.next
        return count

    def get_level_num(self):
        level_num = 0
        itr = self.root
        while itr:
            level_num += 1
            itr = itr.next
        return level_num

    def add_block_node(self,node):
        itr = self.root
        while itr:
            for child in itr.children:
                if node.row_min < child.get('row_max'):
                    self.add_leaf_node(node,itr)
                    return
            itr = itr.next
        return

    def build_ui_tree(self):
        global parent
        if len(self.origin) == 1:
            self.add_dummy_node()
        elif len(self.origin) == 2:
            root = self.add_dummy_node()
            node = LeafNode(self.origin[1])
            self.add_leaf_node(node, root)
        else:
            i = 1
            while i < len(self.origin) - 1:
                if self.root is None:
                    parent = self.add_dummy_node()
                cur_node = LeafNode(self.origin[i])
                nxt_node = LeafNode(self.origin[i + 1])
                if cur_node.row_max <= nxt_node.row_min:  # two nodes are in different levels
                    if not self.is_node_existed(cur_node):
                        self.add_leaf_node(cur_node, parent)
                    parent = self.add_dummy_node()
                elif nxt_node.type == 'Block'and nxt_node.row_max < cur_node.row_min:
                    self.add_block_node(nxt_node)
                    i += 1
                elif cur_node.row_max > nxt_node.row_min:  # two nodes are in the same level
                    if not self.is_node_existed(cur_node):
                        self.add_leaf_node(cur_node, parent)
                    self.add_leaf_node(nxt_node, parent)
                i += 1

            if self.get_leaf_count() < len(
                    self.origin) - 1:  # need to add the last leaf node when for loop is over but the last node is not added
                last_node = LeafNode(self.origin[-1])

                try:
                    leaf_in_last_level = parent.children[-1]
                except:
                    leaf_in_last_level = parent.pre.children[-1]

                if last_node.type == 'Block' and last_node.row_max < leaf_in_last_level['row_min']:
                    self.add_block_node(last_node)
                else:
                    self.add_leaf_node(last_node, parent)


    def output_ui_tree(self,output_path):
        '''
        output the ui tree into a JSON file in output path
        '''
        import json

        ui_tree = []
        ui_tree.append({'bkg':
                            {'height': self.root.attr['height'],
                             'width': self.root.attr['width']}})
        level = 1
        level_num = self.get_level_num()
        ui_tree.append({'num_levels':level_num})

        itr = self.root
        while itr:
            ui_tree.append({f'nodes_in_level_{level}':itr.children})
            itr = itr.next
            level += 1

        with open(output_path,'w') as f:
            json.dump(ui_tree,f, indent=2)


    def to_vec(self, dim = 51):
       '''
       convert UITree to a 51 dimension vector
       vector: [level#, node# in level 1, node# in level 2... node# in level 50]
       '''
       shape_vec = []
       shape_vec.append(self.get_level_num())
       itr = self.root
       while itr:
           shape_vec.append(len(itr.children))
           itr = itr.next
       while len(shape_vec) < dim:
           shape_vec.append(0)
       return shape_vec

    def to_relTree(self):
        '''
        convert the UITree to a list with relative coordinates for tree comparison ;
        [{"id":1, "x_lt": x_lt, "y_lt": y_lt,"x_rd":x_rd, "y_rd":y_rd, "type": compo or text}, ...]
        以后看看可不可以用yield 来实现来节约内存
        '''
        rel_nodes = [] #save the relTree in this list
        itr = self.root
        while itr:
            for child in itr.children:
                rel_node = RelNode(child,self.origin[0]['height'], self.origin[0]['width'])
                node_data = {
                    'id':rel_node.id,
                    'x_lt': rel_node.x_lt,
                    'y_lt': rel_node.y_lt,
                    'x_rd': rel_node.x_rd,
                    'y_rd': rel_node.y_rd,
                    'type': rel_node.type
                }
                rel_nodes.append(node_data)
            itr = itr.next
        return rel_nodes













